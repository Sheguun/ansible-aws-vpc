---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no

  collections:
    - amazon.aws

  tasks:
    - name: Import VPC setup variables
      include_vars: vars/vpc-output_vars

    - name: Import vprofile setup variables
      include_vars: vars/vprostacksetup

    - name: Create vprofile EC2 key
      amazon.aws.ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: "0600"
      when: vprokey_out.changed

    - name: Create Security Group for Load Balancer
      amazon.aws.ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create Security Group for Vprofile Stack
      amazon.aws.ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: Update Security Group with its own sg id
      amazon.aws.ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

    - name: Creating NGINX web01
      amazon.aws.ec2_instance:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        filters:
          "tag:Name": "web01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        tags:
          Name: web01
          Project: Vprofile
          Owner: DevOps Team
        network:
          assign_public_ip: true
          subnet_id: "{{ privsub1id }}"
          security_group_id: "{{ vproStackSG_out.group_id }}"
      register: web01_out

    - name: Creating tomcat app01
      amazon.aws.ec2_instance:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        filters:
          "tag:Name": "app01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        tags:
          Name: app01
          Project: Vprofile
          Owner: DevOps Team
        network:
          assign_public_ip: true
          subnet_id: "{{ privsub1id }}"
          security_group_id: "{{ vproStackSG_out.group_id }}"
      register: app01_out

    - name: Creating memcache mc01
      amazon.aws.ec2_instance:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        filters:
          "tag:Name": "mc01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        tags:
          Name: mc01
          Project: Vprofile
          Owner: DevOps Team
        network:
          assign_public_ip: true
          subnet_id: "{{ privsub1id }}"
          security_group_id: "{{ vproStackSG_out.group_id }}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        filters:
          "tag:Name": "rmq01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        tags:
          Name: rmq01
          Project: Vprofile
          Owner: DevOps Team
        network:
          assign_public_ip: true
          subnet_id: "{{ privsub1id }}"
          security_group_id: "{{ vproStackSG_out.group_id }}"
      register: rmq01_out

    - name: Creating Mysql db01
      amazon.aws.ec2_instance:
        key_name: vpro-key
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        filters:
          "tag:Name": "db01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        tags:
          Name: db01
          Project: Vprofile
          Owner: DevOps Team
        network:
          assign_public_ip: true
          subnet_id: "{{ privsub1id }}"
          security_group_id: "{{ vproStackSG_out.group_id }}"
      register: db01_out

    - debug:
        var: db01_out
